name: Azure Provision & Deploy

on:
  workflow_dispatch:
    inputs:
      resource_group:
        description: 'Azure resource group'
        required: true
      location:
        description: 'Azure region'
        required: false
        default: 'westeurope'
      acr_name:
        description: 'ACR name (short)'
        required: true
      webapp_name:
        description: 'Web App name'
        required: true

jobs:
  provision-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure (service principal credentials)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI extensions
        run: |
          az extension add --name webapp || true

      - name: Set variables
        run: |
          echo "RESOURCE_GROUP=${{ github.event.inputs.resource_group }}" >> $GITHUB_ENV
          echo "LOCATION=${{ github.event.inputs.location }}" >> $GITHUB_ENV
          echo "ACR_NAME=${{ github.event.inputs.acr_name }}" >> $GITHUB_ENV
          echo "WEBAPP_NAME=${{ github.event.inputs.webapp_name }}" >> $GITHUB_ENV

      - name: Prepare Terraform backend (create storage account + container)
        id: tf-backend
        run: |
          set -euo pipefail
          RESOURCE_GROUP=${{ github.event.inputs.resource_group }}
          LOCATION=${{ github.event.inputs.location }}
          echo "Ensuring resource group: $RESOURCE_GROUP in $LOCATION"
          az group create --name "$RESOURCE_GROUP" --location "$LOCATION"

          # Use deterministic storage account name for backend
          SA_NAME="ephemeralnotestf"
          SA_NAME=$(echo "$SA_NAME" | tr '[:upper:]' '[:lower:]')
          echo "Ensuring storage account $SA_NAME exists in $RESOURCE_GROUP"
          az storage account show -n "$SA_NAME" -g "$RESOURCE_GROUP" >/dev/null 2>&1 || \
            az storage account create --name "$SA_NAME" --resource-group "$RESOURCE_GROUP" --location "$LOCATION" --sku Standard_LRS --kind StorageV2 --access-tier Hot

          KEY=$(az storage account keys list -n "$SA_NAME" -g "$RESOURCE_GROUP" --query '[0].value' -o tsv)
          CONTAINER_NAME="tfstate"
          az storage container create --name "$CONTAINER_NAME" --account-name "$SA_NAME" --account-key "$KEY" || true

          echo "STORAGE_ACCOUNT=$SA_NAME" >> $GITHUB_ENV
          echo "STORAGE_CONTAINER=$CONTAINER_NAME" >> $GITHUB_ENV
          echo "TFSTATE_KEY=${{ github.event.inputs.webapp_name }}.tfstate" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Terraform Init
        working-directory: infra
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
          STORAGE_ACCOUNT: ${{ env.STORAGE_ACCOUNT }}
          STORAGE_CONTAINER: ${{ env.STORAGE_CONTAINER }}
          TFSTATE_KEY: ${{ env.TFSTATE_KEY }}
        run: |
          terraform init -backend=true \
            -backend-config="resource_group_name=${{ github.event.inputs.resource_group }}" \
            -backend-config="storage_account_name=$STORAGE_ACCOUNT" \
            -backend-config="container_name=$STORAGE_CONTAINER" \
            -backend-config="key=$TFSTATE_KEY"

      - name: Terraform Apply
        working-directory: infra
        env:
          ARM_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ secrets.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ secrets.AZURE_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ secrets.AZURE_TENANT_ID }}
        run: |
          terraform apply -auto-approve \
            -var="resource_group=${{ github.event.inputs.resource_group }}" \
            -var="location=${{ github.event.inputs.location }}" \
            -var="acr_name=${{ github.event.inputs.acr_name }}" \
            -var="webapp_name=${{ github.event.inputs.webapp_name }}"

      - name: Get ACR login server from Terraform outputs
        id: acr
        working-directory: infra
        run: |
          echo "login-server=$(terraform output -raw acr_login_server)" >> $GITHUB_OUTPUT

      - name: Login to ACR and push image
        run: |
          ACR_NAME=${{ github.event.inputs.acr_name }}
          ACR_LOGIN_SERVER=${{ steps.acr.outputs.login-server }}
          echo "Logging in to ACR: $ACR_NAME"
          az acr login --name "$ACR_NAME"
          IMAGE="$ACR_LOGIN_SERVER/ephemeralnotes:latest"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Configure Web App to use container image
        run: |
          ACR_LOGIN_SERVER=${{ steps.acr.outputs.login-server }}
          IMAGE="$ACR_LOGIN_SERVER/ephemeralnotes:latest"
          az webapp config container set --name ${{ github.event.inputs.webapp_name }} --resource-group ${{ github.event.inputs.resource_group }} --docker-custom-image-name "$IMAGE"
