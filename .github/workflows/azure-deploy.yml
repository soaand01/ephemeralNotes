name: Azure Provision & Deploy

on:
  workflow_dispatch:
    inputs:
      resource_group:
        description: 'Azure resource group'
        required: true
      location:
        description: 'Azure region'
        required: false
        default: 'eastus'
      acr_name:
        description: 'ACR name (short)'
        required: true
      webapp_name:
        description: 'Web App name'
        required: true

jobs:
  provision-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Login to Azure (service principal credentials)
        uses: azure/login@v2
        with:
          creds: ${{ secrets.AZURE_CREDENTIALS }}

      - name: Install Azure CLI extensions
        run: |
          az extension add --name webapp || true

      - name: Set variables
        run: |
          echo "RESOURCE_GROUP=${{ github.event.inputs.resource_group }}" >> $GITHUB_ENV
          echo "LOCATION=${{ github.event.inputs.location }}" >> $GITHUB_ENV
          echo "ACR_NAME=${{ github.event.inputs.acr_name }}" >> $GITHUB_ENV
          echo "WEBAPP_NAME=${{ github.event.inputs.webapp_name }}" >> $GITHUB_ENV

      - name: Run provision script
        env:
          AZURE_SUBSCRIPTION_ID: ${{ secrets.AZURE_SUBSCRIPTION_ID }}
          RESOURCE_GROUP: ${{ github.event.inputs.resource_group }}
          LOCATION: ${{ github.event.inputs.location }}
          ACR_NAME: ${{ github.event.inputs.acr_name }}
          WEBAPP_NAME: ${{ github.event.inputs.webapp_name }}
        run: |
          bash scripts/provision.sh

      - name: Build and push Docker image to ACR
        uses: docker/build-push-action@v5
        with:
          context: .
          push: true
          tags: ${{ steps.acr.outputs.login-server }}/ephemeralnotes:latest
        env:
          ACR_LOGIN_SERVER: ${{ steps.acr.outputs.login-server }}

      - name: Get ACR login server
        id: acr
        run: |
          echo "login-server=$(az acr show -n ${{ github.event.inputs.acr_name }} -g ${{ github.event.inputs.resource_group }} --query loginServer -o tsv)" >> $GITHUB_OUTPUT

      - name: Configure Web App to use container image
        run: |
          ACR_LOGIN_SERVER=$(az acr show -n ${{ github.event.inputs.acr_name }} -g ${{ github.event.inputs.resource_group }} --query loginServer -o tsv)
          IMAGE="$ACR_LOGIN_SERVER/ephemeralnotes:latest"
          az webapp config container set --name ${{ github.event.inputs.webapp_name }} --resource-group ${{ github.event.inputs.resource_group }} --docker-custom-image-name "$IMAGE"
