name: Azure Provision & Deploy

on:
  workflow_dispatch:
    inputs:
      operation:
        description: 'Terraform operation to run'
        required: false
        default: 'apply'
        type: choice
        options:
          - apply
          - destroy

jobs:
  provision-and-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Set ARM secrets into environment
        run: |
          set -euo pipefail
          echo "ARM_SUBSCRIPTION_ID=${{ secrets.AZURE_SUBSCRIPTION_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_ID=${{ secrets.AZURE_CLIENT_ID }}" >> $GITHUB_ENV
          echo "ARM_CLIENT_SECRET=${{ secrets.AZURE_CLIENT_SECRET }}" >> $GITHUB_ENV
          echo "ARM_TENANT_ID=${{ secrets.AZURE_TENANT_ID }}" >> $GITHUB_ENV
          echo "AZURE_CREDENTIALS=${{ secrets.AZURE_CREDENTIALS }}" >> $GITHUB_ENV

      - name: "Preflight: check required secrets"
        run: |
          set -euo pipefail
          missing=0
          : "Checking ARM_* secrets"
          if [ -z "${ARM_SUBSCRIPTION_ID:-}" ]; then echo "Missing ARM_SUBSCRIPTION_ID"; missing=1; fi
          if [ -z "${ARM_CLIENT_ID:-}" ]; then echo "Missing ARM_CLIENT_ID"; missing=1; fi
          if [ -z "${ARM_CLIENT_SECRET:-}" ]; then echo "Missing ARM_CLIENT_SECRET"; missing=1; fi
          if [ -z "${ARM_TENANT_ID:-}" ]; then echo "Missing ARM_TENANT_ID"; missing=1; fi
          if [ $missing -ne 0 ]; then echo "One or more required secrets are missing. Please set them in repository secrets."; exit 1; fi

      - name: Azure CLI login (service principal)
        run: |
          set -euo pipefail
          az login --service-principal -u "$ARM_CLIENT_ID" -p "$ARM_CLIENT_SECRET" --tenant "$ARM_TENANT_ID"
          az account set --subscription "$ARM_SUBSCRIPTION_ID"

      - name: Verify Azure subscription access
        run: |
          set -euo pipefail
          echo "Checking subscription access for $ARM_SUBSCRIPTION_ID"
          acct=$(az account show --query id -o tsv || true)
          echo "az account show -> $acct"
          if [ -z "$acct" ]; then
            echo "No account is currently selected. Call 'az login' or ensure the service principal has access."
            az account list --output table || true
            exit 2
          fi
          if [ "${acct,,}" != "${ARM_SUBSCRIPTION_ID,,}" ]; then
            echo "Logged-in account subscription ($acct) does not match requested subscription ($ARM_SUBSCRIPTION_ID)."
            echo "Full account info:"
            az account show || true
            echo "Listing subscriptions visible to the principal:" 
            az account list --output table || true
            exit 3
          fi

      - name: Install Azure CLI extensions
        run: |
          az extension add --name webapp || true

      - name: Export Terraform backend variables
        run: |
          echo "RESOURCE_GROUP=rg-ephemeralnotes" >> $GITHUB_ENV
          echo "STORAGE_ACCOUNT=saephemeralnotestf" >> $GITHUB_ENV
          echo "TFSTATE_KEY=ephemeralnotes.tfstate" >> $GITHUB_ENV

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_version: '1.5.7'

      - name: Terraform Init
        working-directory: infra
        env:
          ARM_SUBSCRIPTION_ID: ${{ env.ARM_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ env.ARM_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.ARM_CLIENT_SECRET }}
          ARM_TENANT_ID: ${{ env.ARM_TENANT_ID }}
        run: |
          terraform init -backend-config="resource_group_name=${{ env.RESOURCE_GROUP }}" \
            -backend-config="storage_account_name=${{ env.STORAGE_ACCOUNT }}" \
            -backend-config="container_name=tfstate" \
            -backend-config="key=${{ env.TFSTATE_KEY }}"

      - name: Terraform Apply/Destroy
        working-directory: infra
        run: |
          # If a tfvars file exists in infra/, use it. Otherwise, rely on variable defaults.
          VARFILE=""
          if [ -f infra/terraform.tfvars ]; then
            VARFILE="-var-file=infra/terraform.tfvars"
            echo "Using var file: infra/terraform.tfvars"
          fi
          OP="${{ github.event.inputs.operation }}"
          OP="${OP:-apply}"
          echo "Operation: $OP"
          if [ "$OP" = "destroy" ]; then
            terraform destroy $VARFILE -auto-approve -no-color | tee terraform-destroy.log
          else
            terraform apply $VARFILE -auto-approve -no-color | tee terraform-apply.log
          fi

      - name: Get ACR and Web App outputs from Terraform
        id: acr
        working-directory: infra
        run: |
          echo "login-server=$(terraform output -json | jq -r '.acr_login_server.value')" >> $GITHUB_OUTPUT
          echo "acr-name=$(terraform output -json | jq -r '.acr_name.value')" >> $GITHUB_OUTPUT
          echo "webapp-name=$(terraform output -json | jq -r '.webapp_name.value')" >> $GITHUB_OUTPUT

      - name: Login to ACR and push image
        if: "${{ github.event.inputs.operation == 'apply' }}"
        run: |
          set -euo pipefail
          ACR_NAME=${{ steps.acr.outputs.acr-name }}
          ACR_LOGIN_SERVER=${{ steps.acr.outputs.login-server }}
          echo "Logging in to ACR: $ACR_NAME"
          az acr login --name "$ACR_NAME"
          # Determine image name: prefer infra/terraform.tfvars value, otherwise default
          IMAGE_NAME="ephemeralnotes"
          if [ -f infra/terraform.tfvars ]; then
            IMAGE_NAME=$(grep '^image_name\s*=' infra/terraform.tfvars | sed -E 's/.*=\s*"([^\"]+)".*/\1/' || echo "$IMAGE_NAME")
          fi
          IMAGE="$ACR_LOGIN_SERVER/${IMAGE_NAME}:latest"
          echo "Building image $IMAGE"
          docker build -t "$IMAGE" .
          docker push "$IMAGE"

      - name: Configure Web App to use container image
        if: "${{ github.event.inputs.operation == 'apply' }}"
        run: |
          set -euo pipefail
          ACR_LOGIN_SERVER=${{ steps.acr.outputs.login-server }}
          WEBAPP_NAME=${{ steps.acr.outputs.webapp-name }}
          IMAGE_NAME="ephemeralnotes"
          if [ -f infra/terraform.tfvars ]; then
            IMAGE_NAME=$(grep '^image_name\s*=' infra/terraform.tfvars | sed -E 's/.*=\s*"([^\"]+)".*/\1/' || echo "$IMAGE_NAME")
          fi
          IMAGE="$ACR_LOGIN_SERVER/${IMAGE_NAME}:latest"
          echo "Setting Web App $WEBAPP_NAME to use image $IMAGE"
          az webapp config container set --name "$WEBAPP_NAME" --resource-group "$RESOURCE_GROUP" --docker-custom-image-name "$IMAGE"
